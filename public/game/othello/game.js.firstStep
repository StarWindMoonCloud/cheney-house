var count = 0;
var rowSize = 6;
var colSize = 6;
var blackPiece = '<img src="game/othello/black.gif">';
var whitePiece = '<img src="game/othello/white.gif">';

function evaluate(board) {
    var blackSum = 0;
    var whiteSum = 0;
    for (i = 0; i < rowSize; i++) {
        for (j = 0; j < colSize; j++) {
            if (board[i][j] == 0) {
                blackSum++;
            } else if (board[i][j] == 1) {
                whiteSum++;
            }
        }
    }
    
    return whiteSum - blackSum;
}

function isValid(row, col) {

    var targePiece;
    var reversePiece;
    var distance;

    //count == 0 ? targePiece = blackPiece, reversePiece = whitePiece : targePiece = whitePiece, reversePiece = blackPiece;
    count == 0 ? targePiece = 0 : targePiece = 1;
    targePiece == 1 ? reversePiece = 0 : reversePiece = 1;
    var resR = false;

    var i, j;
    for (i = 0; i < rowSize; i++) {
        for (j = 0; j < colSize; j++) {
            if (board[i][j] == targePiece) {
                distance = Math.abs(i - row) + Math.abs(j - col);
                var res = i == row ? true : false;
                res = (j == col);
                res = ((Math.abs(i - row) == Math.abs(j - col)));

                if ((distance > 1) && (i == row || j == col || (Math.abs(i - row) == Math.abs(j - col)))) {
                    // distance greater than 1 and same row/col/diagonal
                    // check if all between pieces of the other color
                    var validBetween = true;
                    if (i == row) {
                        for (var k = Math.min(j, col) + 1; k <= Math.max(j, col) - 1; k++) {
                            if (board[i][k] == -1 || board[i][k] == targePiece) {
                                validBetween = false;
                                break;
                            }
                        }
                    } else if (j == col) {
                        for (var k = Math.min(i, row) + 1; k <= Math.max(i, row) - 1; k++) {
                            if (board[k][j] == -1 || board[k][j] == targePiece) {
                                validBetween = false;
                                break;
                            }
                        }
                    } else {
                        var deltaRow = i > row ? -1 : 1;
                        var deltaCol = j > col ? -1 : 1;
                        if (distance <= 2) validBetween = false;
                        for (var m = i + deltaRow, n = j + deltaCol; m != row || n != col; m += deltaRow, n += deltaCol) {
                            if (board[m][n] == -1 || board[m][n] == targePiece) {
                                validBetween = false;
                                break;
                            }
                        }
                    }
                    if (validBetween) {
                        resR = true;
                        // revert all the pieces in between
                        var deltaRow = i > row ? -1 : 1;
                        var deltaCol = j > col ? -1 : 1;
                        if (i == row) {
                            deltaRow = 0;
                        }
                        if (j == col) {
                            deltaCol = 0;
                        }
                        var table = document.getElementById("gameBoard");
                        var cells = table.getElementsByTagName("td");
                        var index;
                        var PieceTobe;
                        for (var m = i + deltaRow, n = j + deltaCol; m != row || n != col; m += deltaRow, n += deltaCol) {
                            board[m][n] = 1 - board[m][n];
                            index = m * colSize + n;
                            board[m][n] ? PieceTobe = whitePiece : PieceTobe = blackPiece;
                            cells[index].innerHTML = PieceTobe;
                        }
//                        break;
                    }
                }
            }
        }
    }
    return resR;
}
function isValidCell(row, col) {

    var targePiece;
    var reversePiece;
    var distance;

    //count == 0 ? targePiece = blackPiece, reversePiece = whitePiece : targePiece = whitePiece, reversePiece = blackPiece;
    count == 0 ? targePiece = 0 : targePiece = 1;
    targePiece == 1 ? reversePiece = 0 : reversePiece = 1;
    var resR = false;

    var i, j;
    for (i = 0; i < rowSize; i++) {
        for (j = 0; j < colSize; j++) {
            if (board[i][j] == targePiece) {
                distance = Math.abs(i - row) + Math.abs(j - col);
                var res = i == row ? true : false;
                res = (j == col);
                res = ((Math.abs(i - row) == Math.abs(j - col)));

                if ((distance > 1) && (i == row || j == col || (Math.abs(i - row) == Math.abs(j - col)))) {
                    // distance greater than 1 and same row/col/diagonal
                    // check if all between pieces of the other color
                    var validBetween = true;
                    if (i == row) {
                        for (var k = Math.min(j, col) + 1; k <= Math.max(j, col) - 1; k++) {
                            if (board[i][k] == -1 || board[i][k] == targePiece) {
                                validBetween = false;
                                break;
                            }
                        }
                    } else if (j == col) {
                        for (var k = Math.min(i, row) + 1; k <= Math.max(i, row) - 1; k++) {
                            if (board[k][j] == -1 || board[k][j] == targePiece) {
                                validBetween = false;
                                break;
                            }
                        }
                    } else {
                        var deltaRow = i > row ? -1 : 1;
                        var deltaCol = j > col ? -1 : 1;
                        if (distance <= 2) validBetween = false;
                        for (var m = i + deltaRow, n = j + deltaCol; m != row || n != col; m += deltaRow, n += deltaCol) {
                            if (board[m][n] == -1 || board[m][n] == targePiece) {
                                validBetween = false;
                                break;
                            }
                        }
                    }
                    if (validBetween) {
                        resR = true;
		    }
                }
            }
        }
    }
    return resR;
}

function stepAvailable() {
    var i, j;
    for (i = 0; i < rowSize; i++) {
        for (j = 0; j < colSize; j++) {
            if (board[i][j] == -1 && isValidCell(i, j)) return true;
        }
    }
    return false;
}

function placePieceComputer() {
    var i, j;
    var table = document.getElementById("gameBoard");
    cells = table.getElementsByTagName("td");
    for (i = 0; i < rowSize; i++) {
        for (j = 0; j < colSize; j++) {

            if (board[i][j] == -1 && isValid(i, j)) {
                var index = i * colSize + j;
                if (count) {
                    cells[index].innerHTML = whitePiece;
                    board[i][j] = 1;
                } else {
                    cells[index].innerHTML = blackPiece;
                    board[i][j] = 0;
                }
                return;
            }

        }
    }
}

function exchangeTurn() {
    count = 1 - count;
}

function overMsg() {
    // count the number of black and with pieces
    var i, j;
    var countOne = 0, countZero = 0;
    for (i = 0; i < rowSize; i++) {
        for (j = 0; j < colSize; j++) {
            if (board[i][j] == 1) {
                countOne++;
            }
            if (board[i][j] == 0) {
                countZero++;
            }
        }
    }
    
    // output the msg
    var win = false;
    var gap = Math.abs(countZero - countOne);
    if (countZero > countOne) {
        alert("Great! You won by " + gap);
        return;
    }
    if (countZero == countOne) {
        alert("What a draw");
        return;
    }
    alert("Sorry, you lose by " + gap);
}

function stepByComputer() {
    var loop = 2;
    var total = 0;
    for (i = 0; i < loop; i++) {
        total += 1;
        if (total == loop)
            exchangeTurn();
        else
            placePieceComputer();
    }
}

function initTable() {
    var buf = '';
    // Create table UI
    for (var i = 0; i < rowSize; i++) {
        buf += '<tr>'
        for (var j = 0; j < colSize; j++) {
            buf += '<td>';
            buf += '</td>';
        }
        buf += '</tr>'
    }
    // Create table storage and init
    board = new Array(rowSize);
    for (var i = 0; i < rowSize; i++) {
        board[i] = new Array(colSize);
        for (var j = 0; j < colSize; j++) {
            board[i][j] = -1;
        }
    }
    // Add onclick for each cell    
    document.getElementById("gameBoard").innerHTML = buf;
    var table = document.getElementById("gameBoard");
    var cells = table.getElementsByTagName("td");
    for (var i = 0, len = cells.length; i < len; i++) {
        cells[i].onclick = function (e) {
            var rowIndex = this.parentNode.rowIndex;
            var colIndex = this.cellIndex;
            if (this.innerHTML == "" && isValid(rowIndex, colIndex)) {
                if (count) {
                    this.innerHTML = whitePiece;
                    board[rowIndex][colIndex] = 1;
                } else {
                    this.innerHTML = blackPiece;
                    board[rowIndex][colIndex] = 0;
                }
                // Exchange player's turn
                exchangeTurn();
                // Check if computer has way to go 
                var noWay = false;
                while (1) {
                    if (stepAvailable()) {
                        console.log("stepAvailable");
                        if (count) { // Computer's turn
                            stepByComputer();
                        } else { // Player's turn, wait
                            break;
                        }
                    } else {
                        console.log("No stepAvailable");
                        if (noWay) { // Game over
                            overMsg();
			    count = 0;
		            initTable();
                            break;
                        }
                        exchangeTurn();
                        noWay = true;
                    }
                }
                console.log("After while");
            }
        }
    }
    // Place for pieces in the middle of the board
    var x = (rowSize >> 1) - 1;
    var y = (colSize >> 1) - 1;
    var index = x * colSize + y;
    cells[index].innerHTML = blackPiece;
    board[x][y] = 0;
    y++;
    index = x * colSize + y;
    cells[index].innerHTML = whitePiece;
    board[x][y] = 1;
    x++;
    y--;
    index = x * colSize + y;
    cells[index].innerHTML = whitePiece;
    board[x][y] = 1;
    y++;
    index = x * colSize + y;
    cells[index].innerHTML = blackPiece;
    board[x][y] = 0;

    // Init player turn
    var playTurn = document.getElementById("playerTurn");
    if (count == 0) {
        playTurn.innerHTML = blackPiece + " Player Turn";
    } else {
        playTurn.innerHTML = whitePiece + " Player Turn";
    }
}

function adjustTableSize() {
    var tableSize = document.getElementById("tableSizeSelection").value;
    switch (tableSize) {
        case "small":
            rowSize = 6; 
            colSize = 6;
            break;
        case "medium": 
            rowSize = 8;
            colSize = 8;
            break;
        case "large":
            rowSize = 10;
            colSize = 10;
            break;
    }
    initTable();
}

